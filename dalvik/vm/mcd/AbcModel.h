/*
 * Copyright (C) 2013, Indian Institute of Science
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* This is a native library to model check Android apps to detect
 * concurrency bugs. This is a header for modelling functions 
 *
 * @author Pallavi Maiya
 */

#ifndef ABCMODEL_H_
#define ABCMODEL_H_

#include <map>
#include "common.h"

#define ABC_BIND 4
#define ABC_APPBIND_DONE 16
#define ABC_PAUSE 1
#define ABC_RESUME 2
#define ABC_LAUNCH 3
#define ABC_RELAUNCH 5
#define ABC_DESTROY 6
#define ABC_CHANGE_CONFIG 7
#define ABC_STOP 8
#define ABC_RESULT 9
#define ABC_CHANGE_ACT_CONFIG 10
#define ABC_CREATE_SERVICE 11
#define ABC_STOP_SERVICE 12
#define ABC_BIND_SERVICE 13
#define ABC_UNBIND_SERVICE 14
#define ABC_SERVICE_ARGS 15
#define ABC_CONNECT_SERVICE 17
#define ABC_RUN_TIMER_TASK 18
#define ABC_REQUEST_START_SERVICE 19
#define ABC_REQUEST_BIND_SERVICE 20
#define ABC_REQUEST_STOP_SERVICE 21
#define ABC_REQUEST_UNBIND_SERVICE 22
#define ABC_ACTIVITY_START 23
#define ABC_NEW_INTENT 24
#define ABC_START_NEW_INTENT 25
#define ABC_REGISTER_RECEIVER 26
#define ABC_SEND_BROADCAST 27
#define ABC_SEND_STICKY_BROADCAST 28
#define ABC_TRIGGER_ONRECIEVE 29
#define ABC_UNREGISTER_RECEIVER 30
#define ABC_REMOVE_STICKY_BROADCAST 31
#define ABC_TRIGGER_ONRECIEVE_LATER 32
//#define ABC_REQUEST_STOP_SELF 26


//a struct to track two enable locations of ACT-RESULT 
//(one after corresponding STOP and another when finish() is called
//inside activity which was started for result)
struct ActivityResultStruct{
    AbcOpWithId* enable1;
    AbcOpWithId* enable2;
    AbcOpWithId* trigger; 
};
typedef struct ActivityResultStruct AbcActivityResult;

struct EnableTriggerStruct{
    AbcOpWithId* enable; //enable opid of a lifecyclce
    AbcOpWithId* trigger; //trigger opid of a lifecycle
    struct EnableTriggerStruct* prev;
};
typedef struct EnableTriggerStruct AbcEnableTriggerList;

struct ServiceStruct{
    int firstBindServiceRequest;
    int firstCreateServiceRequest;
    int createServiceOp;
    int bindServiceOp;
    AbcOpWithId* prevStartedServiceOp;
    AbcOpWithId* prevBoundServiceOp;
    int firstStopServiceRequest;
    std::set<u4> connectionSet; //needed for bulk HB edges added on UNBIND-SERVICE
    std::set<int> validRequestUnbindSet;
};
typedef struct ServiceStruct AbcService;

struct requestBindStruct{
    AbcOpWithId* requestBindOp;
//    AbcOpWithId* serviceConnectedOp; -->we dont need to track this
    int requestUnbindOp;
    std::string serviceClassname;//only if this is problematic use char* instead
    //prev is needed as same connection obj can be used to connect to different services
    struct requestBindStruct* prev;
};
typedef struct requestBindStruct AbcRequestBind;

struct stickyStruct{
    AbcOpWithId* op;
    bool isSticky;
};
typedef struct stickyStruct AbcSticky;

struct receiverStruct{
    char* action;
    u4 component;
    int intentId;
    int state;
    int delayTriggerOpid;
};
typedef struct receiverStruct AbcReceiver;

struct OnReceiveLaterStruct{
    int sendIntentOpid;
    int registerReceiverOpid;
    bool isSticky;
};
typedef struct OnReceiveLaterStruct OnReceiveLater;


//Activity lifecycle related datastructure
extern AbcOpWithId* blankEnableResumeOp;
//a mapping from activity instance to intentID
extern std::map<u4, int> AbcInstanceIntentMap;
/*map from <instance, lifecycle-state> pair to list of enable-triggers for this with
 *the most recent enable-trigger pair pointed to buy this map
 */
extern std::map<std::pair<u4, int>, AbcEnableTriggerList*> AbcEnableTriggerLcMap;
/*map from service classname to Service struct used to track the state machine of
 *a created service and add HB edges
 */

//Service lifecycle related datastructure
extern std::map<std::string, AbcService*> AbcServiceMap;
//map from intentID (generated by ABC) of startService operation to the operation itself
extern std::map<u4, AbcOpWithId*> AbcRequestStartServiceMap;
/*map from connection object hash to struct containing bindService op,
 *its corresponding onServiceConnected op and unbindRequest op. The second is needed to add HB
 *edges when corresponding unbindService requests are encountered. The last one is needed
 *to add HB edges from that to UNBIND_SERVICE called on the bound service (as unbind
 *requests from clients are a reason for UNBIND SERVICE
 */
extern std::map<u4, AbcRequestBind*> AbcServiceConnectMap;

//Broadcast Receiver related datastructure
extern std::map<int, AbcSticky*> AbcRegisterOnReceiveMap;
extern std::map<int, std::list<AbcOpWithId*> > AbcSendBroadcastOnReceiveMap;

extern int abcAppBindPost;

bool isEventActivityEvent(int eventId);
bool abcMapInstanceWithIntentId(u4 instance, int intentId);
bool checkAndUpdateServiceState(int opId, AbcOp* op);
void addEnableLifecycleEventToMap(int opId, AbcOp* op);
bool connectEnableAndTriggerLifecycleEvents(int triggerOpid, AbcOp* triggerOp);
void checkAndAddToMapIfActivityResult(int opId, AbcOp* op);
bool checkAndUpdateComponentState(int opId, AbcOp* op);
bool checkAndUpdateBroadcastState(int opId, AbcOp* op);
#endif  // ABCMODEL_H_
